{
#If this is a first time for the inv then calculate
#and cache it
#Return it as a new cacheable matrix obeject
cache_m <- makeCacheMatrix(solve(m),nrows(m),ncols(m))
attr(cache_m,"cached_inv") <- cache_m
message("Returning NEW non-cached value")
return(cache_m)
}
}
y <- cacheSolve(x)
x
x.nrow
x$nrow
?wich
?which
?dim
dim(x)
#Transitional Global matrix reference variable
cache_m <- NULL
#################################################################
#
# Function: cachemean
# Author: Bill Woods
# Date: Sun 24, 2016
#
# Description:
#        This function computes the inverse of the special
#        "matrix" returned by `makeCacheMatrix` above. If
#         the inverse has already been calculated (and the
#         matrix has not changed), then`cacheSolve` should
#         retrieve the inverse from the cache.
#
# Arguments:
#        The special cached matrix object created by makeCachMatrix()
#
# Return:
#        Returns the inverse
#
#################################################################
cacheSolve <- function(m) {
#If cache is not null then return inverse
if ( !is.na(attr(m,"cached_inv"))) {
message("Returning cached value")
return(attr(m,"cached_inv"))
}
else
{
#If this is a first time for the inv then calculate
#and cache it
#Return it as a new cacheable matrix obeject
cache_m <- makeCacheMatrix(solve(m),dim(m))
attr(cache_m,"cached_inv") <- cache_m
message("Returning NEW non-cached value")
return(cache_m)
}
}
#Transitional Global matrix reference variable
cache_m <- NULL
#################################################################
#
# Function: cachemean
# Author: Bill Woods
# Date: Sun 24, 2016
#
# Description:
#        This function computes the inverse of the special
#        "matrix" returned by `makeCacheMatrix` above. If
#         the inverse has already been calculated (and the
#         matrix has not changed), then`cacheSolve` should
#         retrieve the inverse from the cache.
#
# Arguments:
#        The special cached matrix object created by makeCachMatrix()
#
# Return:
#        Returns the inverse
#
#################################################################
cacheSolve <- function(m) {
#If cache is not null then return inverse
if ( !is.na(attr(m,"cached_inv"))) {
message("Returning cached value")
return(attr(m,"cached_inv"))
}
else
{
#If this is a first time for the inv then calculate
#and cache it
#Return it as a new cacheable matrix obeject
cache_m <- makeCacheMatrix(solve(m),dim(m))
attr(cache_m,"cached_inv") <- cache_m
message("Returning NEW non-cached value")
return(cache_m)
}
}
x
y <- cacheSolve(x)
y
dim(y)
dim(x)
attr(y,"cached_inv")
attr(x,"cached_inv")
#Transitional Global matrix reference variable
cache_m <- NULL
#################################################################
#
# Function: cachemean
# Author: Bill Woods
# Date: Sun 24, 2016
#
# Description:
#        This function computes the inverse of the special
#        "matrix" returned by `makeCacheMatrix` above. If
#         the inverse has already been calculated (and the
#         matrix has not changed), then`cacheSolve` should
#         retrieve the inverse from the cache.
#
# Arguments:
#        The special cached matrix object created by makeCachMatrix()
#
# Return:
#        Returns the inverse
#
#################################################################
cacheSolve <- function(m) {
#If cache is not null then return inverse
if ( !is.na(attr(m,"cached_inv"))) {
message("Returning cached value")
return(attr(m,"cached_inv"))
}
else
{
#If this is a first time for the inv then calculate
#and cache it
#Return it as a new cacheable matrix obeject
cache_m <- makeCacheMatrix(solve(m),2,2
attr(cache_m,"cached_inv") <- cache_m
message("Returning NEW non-cached value")
return(cache_m)
}
}
#Transitional Global matrix reference variable
cache_m <- NULL
#################################################################
#
# Function: cachemean
# Author: Bill Woods
# Date: Sun 24, 2016
#
# Description:
#        This function computes the inverse of the special
#        "matrix" returned by `makeCacheMatrix` above. If
#         the inverse has already been calculated (and the
#         matrix has not changed), then`cacheSolve` should
#         retrieve the inverse from the cache.
#
# Arguments:
#        The special cached matrix object created by makeCachMatrix()
#
# Return:
#        Returns the inverse
#
#################################################################
cacheSolve <- function(m) {
#If cache is not null then return inverse
if ( !is.na(attr(m,"cached_inv"))) {
message("Returning cached value")
return(attr(m,"cached_inv"))
}
else
{
#If this is a first time for the inv then calculate
#and cache it
#Return it as a new cacheable matrix obeject
cache_m <- makeCacheMatrix(solve(m),2,2)
attr(cache_m,"cached_inv") <- cache_m
message("Returning NEW non-cached value")
return(cache_m)
}
}
y <- cacheSolve(x)
y
attr(x,"cached_inv")
attr(y,"cached_inv")
y
y
x %*% y
y
#Transitional Global matrix reference variable
cache_m <- NULL
#################################################################
#
# Function: cachemean
# Author: Bill Woods
# Date: Sun 24, 2016
#
# Description:
#        This function computes the inverse of the special
#        "matrix" returned by `makeCacheMatrix` above. If
#         the inverse has already been calculated (and the
#         matrix has not changed), then`cacheSolve` should
#         retrieve the inverse from the cache.
#
# Arguments:
#        The special cached matrix object created by makeCachMatrix()
#
# Return:
#        Returns the inverse
#
#################################################################
cacheSolve <- function(m) {
#If cache is not null then return inverse
if ( !is.na(attr(m,"cached_inv"))) {
message("Returning cached value")
return(attr(m,"cached_inv"))
}
else
{
#If this is a first time for the inv then calculate
#and cache it
#Return it as a new cacheable matrix obeject
cache_m <- solve(m)
message("============")
cache_m
message("============")
attr(cache_m,"cached_inv") <- cache_m
message("Returning NEW non-cached value")
return(cache_m)
}
}
y <- cacheSolve(x)
#Transitional Global matrix reference variable
cache_m <- NULL
#################################################################
#
# Function: cachemean
# Author: Bill Woods
# Date: Sun 24, 2016
#
# Description:
#        This function computes the inverse of the special
#        "matrix" returned by `makeCacheMatrix` above. If
#         the inverse has already been calculated (and the
#         matrix has not changed), then`cacheSolve` should
#         retrieve the inverse from the cache.
#
# Arguments:
#        The special cached matrix object created by makeCachMatrix()
#
# Return:
#        Returns the inverse
#
#################################################################
cacheSolve <- function(m) {
#If cache is not null then return inverse
if ( !is.na(attr(m,"cached_inv"))) {
message("Returning cached value")
return(attr(m,"cached_inv"))
}
else
{
#If this is a first time for the inv then calculate
#and cache it
#Return it as a new cacheable matrix obeject
cache_m <- solve(m)
message("============")
message(cache_m)
message("============")
attr(cache_m,"cached_inv") <- cache_m
message("Returning NEW non-cached value")
return(cache_m)
}
}
y <- cacheSolve(x)
y
y <- cacheSolve(x)
y
rm(y)
y <- cacheSolve(x)
y
cacheSolve(y)
cacheSolve(y)
cacheSolve(y)
x
x[1,1]
x[1,1]
y[1,1]
y
attr(y,"cached_inv")
attr(y,"cached_inv")[1,1]
cacheSolve(y)
#Transitional Global matrix reference variable
cache_m <- NULL
#################################################################
#
# Function: cachemean
# Author: Bill Woods
# Date: Sun 24, 2016
#
# Description:
#        This function computes the inverse of the special
#        "matrix" returned by `makeCacheMatrix` above. If
#         the inverse has already been calculated (and the
#         matrix has not changed), then`cacheSolve` should
#         retrieve the inverse from the cache.
#
# Arguments:
#        The special cached matrix object created by makeCachMatrix()
#
# Return:
#        Returns the inverse
#
#################################################################
cacheSolve <- function(m) {
#If cache is not null then return inverse
if ( !is.na(attr(m,"cached_inv")[1,1])) {
message("Returning cached value")
return(attr(m,"cached_inv"))
}
else
{
#If this is a first time for the inv then calculate
#and cache it
#Return it as a new cacheable matrix obeject
cache_m <- solve(m)
attr(cache_m,"cached_inv") <- cache_m
message("Returning NEW non-cached value")
return(cache_m)
}
}
cacheSolve(y)
cacheSolve(y)
cacheSolve(x)
cacheSolve(x)x
cacheSolve(x)
rm(x)
x
x <- makeCacheMatrix(c(1,2,3,4),2,2)
x
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
rm(x)
x <- makeCacheMatrix(c(1,2,3,4),2,2)
x
cacheSolve(x)
x
cacheSolve(x)
x
cacheSolve(x)
debug(cacheSolve(x))
debug(cacheSolve
)
cacheSolve(x)
undebug(cacheSolve)
cacheSolve(x)
y
rm(y)
cacheSolve(x)
x
diag(nrow = nrow(x), ncol = ncol(x))
?diag
x
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
x %*?% cacheSolve(x)
x %*% cacheSolve(x)
x %*% cacheSolve(x) == diag(nrow = nrow(x), ncol = ncol(x))
if(x %*% cacheSolve(x) == diag(nrow = nrow(x), ncol = ncol(x))) print(1)
zz <- x %*% cacheSolve(x)
zz
if (zz) print(1)
sum(zz)
zz
zz <- x %*% cacheSolve(x)
zz
?is.matrix
z <- c(1,2,3)
z
attr(z,"value") <-"Sudheers Finest"
z
attr(z,"value")
attr(z,"value2") <-"Thanks for attending the mona call"
z
attr(z,"value2")
attr(z,"value")
attr(z)
z
for(i in z) print(z)
for(i in z) print(z)
for(i in z) print(i)
for(i in z) print(i)
z
M <- makeCacheMatrix(c(1,2,3,4),2,2)
M
dbug(cacheSolve)
debug(cacheSolve)
cacheSolve(M)
M
undebug(cacheSolve)
M''
M
N <- cacheSolve(M)
cacheSolve(M)
#Transitional Global matrix reference variable
cache_m <- NULL
#################################################################
#
# Function: cachemean
# Author: Bill Woods
# Date: Sun 24, 2016
#
# Description:
#        This function computes the inverse of the special
#        "matrix" returned by `makeCacheMatrix` above. If
#         the inverse has already been calculated (and the
#         matrix has not changed), then`cacheSolve` should
#         retrieve the inverse from the cache.
#
# Arguments:
#        The special cached matrix object created by makeCachMatrix()
#
# Return:
#        Returns the inverse
#
#################################################################
cacheSolve <- function(m) {
#If cache value is available, and the matrix has not
#been modified then return the cached matirx
#solve(m) %*% m == diag(nrow = nrow(m), ncol = ncol(m))
#attr(m,"cached_inv") %*% m will provide the identity matrix
#if the matrix m has been changed or this is the first time
#diag(nrow = nrow(m), ncol = ncol(m)) provides what the identity matrix
#should be, when compared together and if true then the cached matrix
#may be provided.
#
if ( !is.na(attr(m,"cached_inv")[1,1])) {
#if( (attr(m,"cached_inv") %*% m) == diag(nrow = nrow(m), ncol = ncol(m))) {
message("Returning cached value")
return(attr(m,"cached_inv"))
}
else
{
#If this is a first time for the inv then calculate
#and cache it
#Return it as a new cacheable matrix obeject
#cache_m <- solve(m)
m <<- solve(m)
#attr(cache_m,"cached_inv") <- cache_m
attr(m,"cached_inv") <- m
message("Returning NEW non-cached value")
#return(cache_m)
return(m)
}
}
source("cacheSolve.R")
cacheSolve(M)
cacheSolve(M)
M
M
cacheSolve(M)
cacheSolve(m)
m
cacheSolve(M)
source("cacheSolve.R")
cacheSolve(M)
m
m
cacheSolve(M)
h <- function(x) { hidden(x)}
h(3)
h <- function(x) { invisible(x)}
h(3)
(h(3))
h <- function(x) { invisible(x);on.exit(print("Cool!"))}
(h(3))
h(3)
h <- function(x) { invisible(x);return("7777");on.exit(print("Cool!"))}
h(3)
(h(3))
return(cache_m)
source('C:/Bwoods/Coursera/Rworkspace/Week3/ProgrammingAssignment2/cacheSolve.R')
source('C:/Bwoods/Coursera/Rworkspace/Week3/ProgrammingAssignment2/cacheSolve.R')
source('C:/Bwoods/Coursera/Rworkspace/Week3/ProgrammingAssignment2/cacheSolve.R')
source('C:/Bwoods/Coursera/Rworkspace/Week3/ProgrammingAssignment2/makeCacheMatrix.R')
source('C:/Bwoods/Coursera/Rworkspace/Week3/ProgrammingAssignment2/makeCacheMatrix.R')
source('C:/Bwoods/Coursera/Rworkspace/Week3/ProgrammingAssignment2/cacheSolve.R')
x
x <- makeCacheMatrix(1:9,3,3)
x
source('C:/Bwoods/Coursera/Rworkspace/Week3/ProgrammingAssignment2/makeCacheMatrix.R')
x <- makeCacheMatrix(1:9,3,3)
x
source('C:/Bwoods/Coursera/Rworkspace/Week3/ProgrammingAssignment2/makeCacheMatrix.R')
?runif
?force
?%o%
?%o%
x
y <- cacheSolve(x)
y <- cacheSolve(x)
y
x
y <- cacheSolve(x)
debug(cacheSolve)
y <- cacheSolve(x)
source('C:/Bwoods/Coursera/Rworkspace/Week3/ProgrammingAssignment2/cacheSolve.R')
y <- cacheSolve(x)
